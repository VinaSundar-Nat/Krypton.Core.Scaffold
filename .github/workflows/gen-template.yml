name: Generate .NET Project

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Project Name (PascalCase, e.g., MediaRecorder - Kr prefix will be added automatically)'
        required: true
        type: string
      create_repo:
        description: 'Create new GitHub repository?'
        required: true
        type: boolean
        default: true

jobs:
  generate-project:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout scaffold repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        
    - name: Validate project name
      run: |
        if [[ ! "${{ github.event.inputs.project_name }}" =~ ^[A-Z][a-zA-Z0-9]*$ ]]; then
          echo "Project name must be PascalCase and start with a letter"
          exit 1
        fi
        
    - name: Generate project files
      run: |
        # Add prefix to project name
        BASE_PROJECT_NAME="${{ github.event.inputs.project_name }}"
        PROJECT_NAME="${BASE_PROJECT_NAME}"
        
        # Create working directory
        mkdir -p generated-project
        
        # Copy template files
        cp -r src/* generated-project/
        
        # Replace placeholders in all files
        find generated-project -type f -name "*.cs" -o -name "*.csproj" -o -name "*.sln" -o -name "*.md" -o -name "*.json" -o -name "*.http" | \
        while read file; do
          sed -i "s/__PROJECT_NAME__/$PROJECT_NAME/g" "$file"
        done
        
        # Rename directories first (deepest first to avoid path issues)
        find generated-project -depth -type d -name "*__PROJECT_NAME__*" | \
        while read dir; do
          new_dir=$(echo "$dir" | sed "s/__PROJECT_NAME__/$PROJECT_NAME/g")
          if [ "$dir" != "$new_dir" ]; then
            echo "Renaming directory: $dir -> $new_dir"
            mv "$dir" "$new_dir"
          fi
        done
        
        # Then rename files
        find generated-project -type f -name "*__PROJECT_NAME__*" | \
        while read file; do
          new_file=$(echo "$file" | sed "s/__PROJECT_NAME__/$PROJECT_NAME/g")
          if [ "$file" != "$new_file" ]; then
            echo "Renaming file: $file -> $new_file"
            mv "$file" "$new_file"
          fi
        done
                
    - name: Create new repository
      if: github.event.inputs.create_repo == 'true'
      env:
        GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      run: |
        # Check if token is available
        if [ -z "$GH_TOKEN" ]; then
          echo "❌ Cannot create repository: PERSONAL_ACCESS_TOKEN secret not configured"
          echo "## ⚠️ Repository Creation Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To enable automatic repository creation:" >> $GITHUB_STEP_SUMMARY
          echo "1. Create a Personal Access Token with 'repo' permissions" >> $GITHUB_STEP_SUMMARY
          echo "2. Add it as a repository secret named 'PERSONAL_ACCESS_TOKEN'" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your project files are still available as artifacts above." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
        # Test token permissions
        echo "Testing GitHub token permissions..."
        if ! gh auth status; then
          echo "❌ GitHub token authentication failed"
          exit 1
        fi
        
        # Set up git configuration with token
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        git config --global url."https://x-access-token:${GH_TOKEN}@github.com/".insteadOf "https://github.com/"
        
        # Create new repository with Kr prefix
        REPO_NAME="Kr.${{ github.event.inputs.project_name }}"
        
        # Create the repository
        echo "Creating repository: $REPO_NAME"
        if ! gh repo create $REPO_NAME --public --description "Generated .NET project from Kr scaffold template"; then
          echo "❌ Failed to create repository. Check your token permissions:"
          echo "- Token needs 'repo' scope for public repositories"
          echo "- Token needs 'public_repo' scope"
          echo "- If using fine-grained tokens, ensure 'Repository creation' permission"
          exit 1
        fi
        
        # Initialize git in the generated project directory
        cd generated-project
        git init
        git add .
        git commit -m "🚀 Initial commit: Generated Kr.${{ github.event.inputs.project_name }} from scaffold template

        Generated: $(date)
        Scaffold: ${{ github.repository }}"
        
        # Add remote and push
        git remote add origin "https://github.com/${{ github.repository_owner }}/$REPO_NAME.git"
        git branch -M main
        git push -u origin main
        
        # Output the new repository URL
        echo "✅ New repository created: https://github.com/${{ github.repository_owner }}/Kr.${{ github.event.inputs.project_name }}"
        
        # Add repository URL to job summary
        echo "## 🎉 Repository Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** [Kr.${{ github.event.inputs.project_name }}](https://github.com/${{ github.repository_owner }}/Kr.${{ github.event.inputs.project_name }})" >> $GITHUB_STEP_SUMMARY
        echo "**Generated:** $(date)" >> $GITHUB_STEP_SUMMARY
        
    - name: Repository creation skipped
      if: github.event.inputs.create_repo == 'false'
      run: |
        echo "Repository creation was skipped by user choice"
        echo "## 📦 Project Generated Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Project:** Kr.${{ github.event.inputs.project_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Generated:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Download the artifact above to get your generated project files." >> $GITHUB_STEP_SUMMARY